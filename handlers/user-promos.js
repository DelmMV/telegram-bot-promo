const { Scenes } = require('telegraf');
const User = require('../database/models/user');
const Promo = require('../database/models/promo');
const { mainKeyboard } = require('../utils/keyboard');
const { formatDate } = require('../utils/helpers');

module.exports = (bot) => {
  // –°—Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userPromosScene = new Scenes.BaseScene('user-promos');
  
  userPromosScene.enter(async (ctx) => {
    try {
      const userId = ctx.from.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const user = await User.findOne({ telegramId: userId })
        .populate('claimedPromos.promoId');
      
      if (!user || !user.claimedPromos || user.claimedPromos.length === 0) {
        return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      const sortedPromos = [...user.claimedPromos].sort((a, b) => 
        new Date(b.claimedAt) - new Date(a.claimedAt)
      );
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      let message = '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n';
      
      for (const promoItem of sortedPromos) {
        const { promoId, code, claimedAt, activated, activatedAt } = promoItem;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
        if (!promoId) {
          message += `üîÑ –ö–æ–¥: ${code}\n`;
          message += `–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n`;
          message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          if (activated) {
            message += `–°—Ç–∞—Ç—É—Å: ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${formatDate(activatedAt)}\n`;
          } else {
            message += `–°—Ç–∞—Ç—É—Å: ‚è≥ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`;
          }
          
          message += `\n`;
          continue;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        let statusIcon = '';
        const isExpired = promoId.expiresAt < new Date();
        
        if (!promoId.isActive) {
          statusIcon = '‚ùå'; // –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
        } else if (isExpired) {
          statusIcon = '‚è±Ô∏è'; // –ò—Å—Ç–µ–∫
        } else {
          statusIcon = '‚úÖ'; // –ê–∫—Ç–∏–≤–µ–Ω
        }
        
        message += `${statusIcon} ${promoId.name}\n`;
        message += `–ö–æ–¥: ${code}\n`;
        message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${promoId.description}\n`;
        message += `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promoId.expiresAt)}\n`;
        message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if (activated) {
          message += `–°—Ç–∞—Ç—É—Å: üîê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${formatDate(activatedAt)}\n`;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç—Ä–∞–∂–∞–µ–º —ç—Ç–æ
          if (!promoId.isActive) {
            message += `–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–º–æ–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞)\n`;
          } else if (isExpired) {
            message += `–°—Ç–∞—Ç—É—Å: ‚è±Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫)\n`;
          } else {
            message += `–°—Ç–∞—Ç—É—Å: üîì –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`;
          }
        }
        
        message += `\n`;
      }
      
      return ctx.reply(message, mainKeyboard);
    } catch (error) {
      console.error('Error in user promos scene:', error);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
  userPromosScene.hears('–ù–∞–∑–∞–¥', (ctx) => {
    return ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainKeyboard);
  });
  
  return {
    scene: userPromosScene
  };
};