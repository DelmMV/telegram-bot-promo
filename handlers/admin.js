const { Scenes, Markup } = require('telegraf');
const ActivatedPromo = require('../database/models/activatedPromo');
const Admin = require('../database/models/admin');
const Promo = require('../database/models/promo');
const { 
  adminKeyboard, 
  promoManagementKeyboard, 
  adminManagementKeyboard,
  mainKeyboard,
  backButton,
  cancelButton
} = require('../utils/keyboard');
const User = require('../database/models/user');
const { isAdmin } = require('../middlewares/auth');
const { parseDateString, isValidDateFormat, formatDate } = require('../utils/helpers');

module.exports = (bot) => {
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  bot.command('admin', async (ctx) => {
    try {
      const telegramId = ctx.from.id;
      const admin = await Admin.findOne({ telegramId, isActive: true });
      
      if (!admin) {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
      }
      
      return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.', adminKeyboard);
    } catch (error) {
      console.error('Error in admin command:', error);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.');
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  bot.command('promo_list', isAdmin, (ctx) => {
    ctx.scene.enter('promo-list-admin');
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  bot.command('add_test_promo', isAdmin, async (ctx) => {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è +30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);
      
      const newPromo = new Promo({
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
        totalLimit: 10,
        expiresAt,
      });
      
      await newPromo.save();
      
      ctx.reply(
        `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${newPromo.name}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${newPromo.description}\n` +
        `–õ–∏–º–∏—Ç: ${newPromo.totalLimit}\n` +
        `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(newPromo.expiresAt)}`
      );
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      setTimeout(() => {
        ctx.scene.enter('promo-list-admin');
      }, 1000);
      
    } catch (error) {
      console.error('Error creating test promo:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  });
  
  const activatePromoScene = new Scenes.WizardScene(
    'activate-promo',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    (ctx) => {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminKeyboard);
        return ctx.scene.leave();
      }
      
      const promoCode = ctx.message.text.toUpperCase().trim();
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        const existingActivation = await ActivatedPromo.findOne({ code: promoCode });
        
        if (existingActivation) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
          const promo = await Promo.findById(existingActivation.promoId);
          const promoName = promo ? promo.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
          
          ctx.reply(
            `‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: ${promoName}\n` +
            `–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${formatDate(existingActivation.activatedAt)}`,
            adminKeyboard
          );
          return ctx.scene.leave();
        }
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        const user = await User.findOne({ 
          "claimedPromos.code": promoCode 
        });
        
        if (!user) {
          ctx.reply(
            `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
            adminKeyboard
          );
          return ctx.scene.leave();
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const claimedPromoIndex = user.claimedPromos.findIndex(p => p.code === promoCode);
        
        if (claimedPromoIndex === -1) {
          ctx.reply(
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ "${promoCode}".`,
            adminKeyboard
          );
          return ctx.scene.leave();
        }
        
        const claimedPromo = user.claimedPromos[claimedPromoIndex];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const promo = await Promo.findById(claimedPromo.promoId);
        
        if (!promo) {
          ctx.reply(
            `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" –Ω–∞–π–¥–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`,
            adminKeyboard
          );
          return ctx.scene.leave();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        const newActivation = new ActivatedPromo({
          promoId: claimedPromo.promoId,
          code: promoCode,
          activatedBy: ctx.from.id
        });
        
        await newActivation.save();
        
        // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.claimedPromos[claimedPromoIndex].activated = true;
        user.claimedPromos[claimedPromoIndex].activatedAt = new Date();
        await user.save();
        
        ctx.reply(
          `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName} ${user.username ? `(@${user.username})` : ''}\n` +
          `ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegramId}\n` +
          `–¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promo.name}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
          `–í—ã–¥–∞–Ω: ${formatDate(claimedPromo.claimedAt)}\n` +
          `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${formatDate(new Date())}\n\n` +
          `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É "${promo.name}":\n` +
          `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.usedCount + 1}/${promo.totalLimit}`,
          adminKeyboard
        );
        
        // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await Promo.findByIdAndUpdate(claimedPromo.promoId, { $inc: { usedCount: 1 } });
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error in promo activation:', error);
        ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error.message}`, adminKeyboard);
        return ctx.scene.leave();
      }
    }
  );
  
  const activatedPromosScene = new Scenes.BaseScene('activated-promos');

  activatedPromosScene.enter(async (ctx) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
      const activations = await ActivatedPromo.find()
        .sort({ activatedAt: -1 })
        .populate('promoId')
        .limit(20); // –û–≥—Ä–∞–Ω–∏—á–∏–º —Å–ø–∏—Å–æ–∫ 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
      
      if (activations.length === 0) {
        ctx.reply('–ï—â–µ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', adminKeyboard);
        return ctx.scene.leave();
      }
      
      let message = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n';
      
      for (const activation of activations) {
        const promoName = activation.promoId ? activation.promoId.name : '–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        const user = await User.findOne({ "claimedPromos.code": activation.code });
        const userInfo = user 
          ? `${user.firstName} ${user.lastName} ${user.username ? `(@${user.username})` : ''}`
          : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        
        message += `üîë –ö–æ–¥: ${activation.code}\n`;
        message += `üì¶ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoName}\n`;
        message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\n`;
        message += `üïí –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${formatDate(activation.activatedAt)}\n\n`;
      }
      
      ctx.reply(message, adminKeyboard);
      return ctx.scene.leave();
    } catch (error) {
      console.error('Error in activated promos scene:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', adminKeyboard);
      return ctx.scene.leave();
    }
  });
  
  const activateUserPromoScene = new Scenes.WizardScene(
    'activate-user-promo',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (ctx) => {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminKeyboard);
        return ctx.scene.leave();
      }
      
      const promoCode = ctx.message.text.toUpperCase().trim();
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        const existingActivation = await ActivatedPromo.findOne({ code: promoCode });
        
        if (existingActivation) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
          const promo = await Promo.findById(existingActivation.promoId);
          const promoName = promo ? promo.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
          
          ctx.reply(
            `‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${promoName}\n` +
            `–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${formatDate(existingActivation.activatedAt)}`,
            adminKeyboard
          );
          return ctx.scene.leave();
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        const currentDate = new Date();
        const availablePromos = await Promo.find({
          isActive: true,
          expiresAt: { $gt: currentDate },
          $expr: { $lt: ["$usedCount", "$totalLimit"] }
        });
        
        if (availablePromos.length === 0) {
          ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', adminKeyboard);
          return ctx.scene.leave();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ - –∏—Å–ø—Ä–∞–≤–∏–º callback_data
        const keyboard = availablePromos.map(promo => [
          Markup.button.callback(
            `${promo.name} (${promo.usedCount}/${promo.totalLimit})`, 
            `activate_promo:${promo._id.toString()}:${promoCode}`
          )
        ]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_activation')]);
        
        ctx.reply(
          `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º "${promoCode}":`,
          Markup.inlineKeyboard(keyboard)
        );
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error in promo activation:', error);
        ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error.message}`, adminKeyboard);
        return ctx.scene.leave();
      }
    },
    // –®–∞–≥ 3: –í—ã–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminKeyboard);
        return ctx.scene.leave();
      }
      
      const promoCode = ctx.message.text.toUpperCase().trim();
      ctx.wizard.state.promoCode = promoCode;
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        const currentDate = new Date();
        const availablePromos = await Promo.find({
          isActive: true,
          expiresAt: { $gt: currentDate },
          $expr: { $lt: ["$usedCount", "$totalLimit"] }
        });
        
        if (availablePromos.length === 0) {
          ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', adminKeyboard);
          return ctx.scene.leave();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
        const keyboard = availablePromos.map(promo => [
          Markup.button.callback(
            `${promo.name} (${promo.usedCount}/${promo.totalLimit})`, 
            `activate_promo:${promo._id}:${ctx.wizard.state.userId}:${promoCode}`
          )
        ]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_activation')]);
        
        ctx.reply(
          `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${ctx.wizard.state.userId}:`,
          Markup.inlineKeyboard(keyboard)
        );
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error selecting promo for activation:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', adminKeyboard);
        return ctx.scene.leave();
      }
    }
  );
  
  // –°—Ü–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminAuthScene = new Scenes.BaseScene('admin-auth');
  
  adminAuthScene.enter(async (ctx) => {
    try {
      const telegramId = ctx.from.id;
      const admin = await Admin.findOne({ telegramId, isActive: true });
      
      if (!admin) {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
      }
      
      ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.', adminKeyboard);
      return ctx.scene.leave();
    } catch (error) {
      console.error('Error in admin auth scene:', error);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    }
  });
  
  // –°—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const addPromoScene = new Scenes.WizardScene(
    'add-promo',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    (ctx) => {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      ctx.wizard.state.promoName = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      ctx.wizard.state.promoDescription = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–ª–∏–º–∏—Ç):', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
    (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      const limit = parseInt(ctx.message.text);
      if (isNaN(limit) || limit <= 0) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
        return;
      }
      
      ctx.wizard.state.promoLimit = limit;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      const dateString = ctx.message.text;
      if (!isValidDateFormat(dateString)) {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.');
        return;
      }
      
      const expiresAt = parseDateString(dateString);
      if (expiresAt < new Date()) {
        ctx.reply('–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.');
        return;
      }
      
      try {
        const newPromo = new Promo({
          name: ctx.wizard.state.promoName,
          description: ctx.wizard.state.promoDescription,
          totalLimit: ctx.wizard.state.promoLimit,
          expiresAt,
        });
        
        await newPromo.save();
        
        ctx.reply(
          `–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${newPromo.name}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${newPromo.description}\n` +
          `–õ–∏–º–∏—Ç: ${newPromo.totalLimit}\n` +
          `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(newPromo.expiresAt)}`,
          promoManagementKeyboard
        );
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error creating promo:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
    }
  );
  
  // –°—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const addAdminScene = new Scenes.WizardScene(
    'add-admin',
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    (ctx) => {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
      
      const newAdminId = parseInt(ctx.message.text);
      if (isNaN(newAdminId)) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ).');
        return;
      }
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        const existingAdmin = await Admin.findOne({ telegramId: newAdminId });
        if (existingAdmin) {
          if (existingAdmin.isActive) {
            ctx.reply('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', adminManagementKeyboard);
          } else {
            // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
            existingAdmin.isActive = true;
            existingAdmin.addedBy = ctx.from.id;
            existingAdmin.addedAt = new Date();
            await existingAdmin.save();
            ctx.reply('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', adminManagementKeyboard);
          }
          return ctx.scene.leave();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
          const userInfo = await ctx.telegram.getChat(newAdminId);
          
          const newAdmin = new Admin({
            telegramId: newAdminId,
            firstName: userInfo.first_name || '',
            lastName: userInfo.last_name || '',
            username: userInfo.username || '',
            addedBy: ctx.from.id,
            isActive: true,
            addedAt: new Date()
          });
          
          await newAdmin.save();
          
          ctx.reply(
            `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
            `ID: ${newAdmin.telegramId}\n` +
            `–ò–º—è: ${newAdmin.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `–§–∞–º–∏–ª–∏—è: ${newAdmin.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
            `–Æ–∑–µ—Ä–Ω–µ–π–º: ${newAdmin.username ? '@' + newAdmin.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
            adminManagementKeyboard
          );
        } catch (telegramError) {
          console.error('Error getting user info from Telegram:', telegramError);
          
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram API, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é
          ctx.wizard.state.newAdminId = newAdminId;
          ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', cancelButton);
          return ctx.wizard.next();
        }
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error adding admin:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
    },
    // –®–∞–≥ 3: –í–≤–æ–¥ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API)
    (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
      
      ctx.wizard.state.firstName = ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ "–ù–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
    (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
      
      ctx.wizard.state.lastName = ctx.message.text === '–ù–µ—Ç' ? '' : ctx.message.text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @ –≤ –Ω–∞—á–∞–ª–µ, –∏–ª–∏ "–ù–µ—Ç", –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):', cancelButton);
      return ctx.wizard.next();
    },
    // –®–∞–≥ 5: –í–≤–æ–¥ —é–∑–µ—Ä–Ω–µ–π–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
      
      try {
        const username = ctx.message.text === '–ù–µ—Ç' ? '' : ctx.message.text;
        
        const newAdmin = new Admin({
          telegramId: ctx.wizard.state.newAdminId,
          firstName: ctx.wizard.state.firstName,
          lastName: ctx.wizard.state.lastName,
          username: username,
          addedBy: ctx.from.id,
          isActive: true,
          addedAt: new Date()
        });
        
        await newAdmin.save();
        
        ctx.reply(
          `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
          `ID: ${newAdmin.telegramId}\n` +
          `–ò–º—è: ${newAdmin.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
          `–§–∞–º–∏–ª–∏—è: ${newAdmin.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `–Æ–∑–µ—Ä–Ω–µ–π–º: ${newAdmin.username ? '@' + newAdmin.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
          adminManagementKeyboard
        );
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error adding admin with manual info:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
    }
  );
  
  // –°—Ü–µ–Ω–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const promoListAdminScene = new Scenes.BaseScene('promo-list-admin');
  
  promoListAdminScene.enter(async (ctx) => {
    try {
      const promos = await Promo.find().sort({ createdAt: -1 });
      
      if (promos.length === 0) {
        ctx.reply('–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
      const keyboard = [];
      promos.forEach((promo) => {
        const status = promo.isActive ? 
          (promo.expiresAt < new Date() ? '‚è±Ô∏è' : 
            (promo.usedCount >= promo.totalLimit ? 'üîí' : '‚úÖ')) 
          : '‚ùå';
          
        keyboard.push([
          Markup.button.callback(
            `${status} ${promo.name} (${promo.usedCount}/${promo.totalLimit})`, 
            `promo_view:${promo._id}`
          )
        ]);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_promo_management')]);
      
      ctx.reply(
        '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', 
        Markup.inlineKeyboard(keyboard)
      );
      
      ctx.session.listMode = 'promos';
    } catch (error) {
      console.error('Error in promo list admin scene:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', promoManagementKeyboard);
      return ctx.scene.leave();
    }
  });
  
  promoListAdminScene.hears('–ù–∞–∑–∞–¥', (ctx) => {
    ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', promoManagementKeyboard);
    return ctx.scene.leave();
  });
  
  promoListAdminScene.on('text', async (ctx) => {
    try {
      const text = ctx.message.text;
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "–ù–∞–∑–∞–¥" –∏–ª–∏ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É
      if (text === '–ù–∞–∑–∞–¥' || text === '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤' || text === '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥') {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        if (text === '–ù–∞–∑–∞–¥') {
          ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', promoManagementKeyboard);
          return ctx.scene.leave();
        } else if (text === '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤') {
          // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
          return ctx.scene.reenter();
        } else if (text === '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥') {
          ctx.scene.leave();
          return ctx.scene.enter('add-promo');
        }
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ MongoDB ObjectId
      // ObjectId –≤ MongoDB - —ç—Ç–æ 24-—Å–∏–º–≤–æ–ª—å–Ω–∞—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      const isObjectId = /^[0-9a-fA-F]{24}$/.test(text);
      
      if (!isObjectId) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è inline-–∫–Ω–æ–ø–∫–∏.');
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ ObjectId, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
      const promoId = text;
      
      const promo = await Promo.findById(promoId);
      if (!promo) {
        return ctx.reply('–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ ...
    } catch (error) {
      console.error('Error handling promo ID:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  });
  
  // –°—Ü–µ–Ω–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  const adminListScene = new Scenes.BaseScene('admin-list');
  
  adminListScene.enter(async (ctx) => {
    try {
      const admins = await Admin.find().sort({ addedAt: -1 });
      
      if (admins.length === 0) {
        ctx.reply('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', adminManagementKeyboard);
        return ctx.scene.leave();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const keyboard = [];
      admins.forEach((admin) => {
        const status = admin.isActive ? '‚úÖ' : '‚ùå';
        keyboard.push([
          Markup.button.callback(
            `${status} ${admin.firstName} ${admin.lastName} ${admin.username ? '@' + admin.username : ''}`,
            `admin_view:${admin.telegramId}`
          )
        ]);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      keyboard.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_admin_management')]);
      
      ctx.reply(
        '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
        Markup.inlineKeyboard(keyboard)
      );
      
      ctx.session.listMode = 'admins';
    } catch (error) {
      console.error('Error in admin list scene:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', adminManagementKeyboard);
      return ctx.scene.leave();
    }
  });
  
  adminListScene.hears('–ù–∞–∑–∞–¥', (ctx) => {
    ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.', adminManagementKeyboard);
    return ctx.scene.leave();
  });
  
  adminListScene.on('text', async (ctx) => {
    try {
      const adminId = parseInt(ctx.message.text);
      
      if (isNaN(adminId)) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—á–∏—Å–ª–æ).');
      }
      
      const admin = await Admin.findOne({ telegramId: adminId });
      if (!admin) {
        return ctx.reply('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      
      // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      const isSelf = admin.telegramId === ctx.from.id;
      
      ctx.reply(
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.firstName} ${admin.lastName} ${admin.username ? '@' + admin.username : ''}\n\n` +
        `ID: ${admin.telegramId}\n` +
        `–°—Ç–∞—Ç—É—Å: ${admin.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(admin.addedAt)}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              admin.isActive ? 'üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
              `admin_toggle:${admin.telegramId}`,
              isSelf // Disable button if it's the current admin
            )
          ],
          [
            Markup.button.callback(
              'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
              `admin_delete:${admin.telegramId}`,
              isSelf // Disable button if it's the current admin
            )
          ],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'admin_back_to_list')]
        ])
      );
    } catch (error) {
      console.error('Error handling admin ID:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });
  
  // –°—Ü–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const editPromoScene = new Scenes.WizardScene(
    'edit-promo',
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
    (ctx) => {
      const promoId = ctx.scene.state.promoId;
      
      if (!promoId) {
        ctx.reply('–û—à–∏–±–∫–∞: ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      ctx.reply(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n' +
        '1. –ù–∞–∑–≤–∞–Ω–∏–µ\n' +
        '2. –û–ø–∏—Å–∞–Ω–∏–µ\n' +
        '3. –õ–∏–º–∏—Ç\n' +
        '4. –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
        cancelButton
      );
      
      return ctx.wizard.next();
    },
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      const choice = ctx.message.text;
      ctx.wizard.state.editField = null;
      
      switch (choice) {
        case '1':
          ctx.wizard.state.editField = 'name';
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', cancelButton);
          break;
        case '2':
          ctx.wizard.state.editField = 'description';
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', cancelButton);
          break;
        case '3':
          ctx.wizard.state.editField = 'totalLimit';
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', cancelButton);
          break;
        case '4':
          ctx.wizard.state.editField = 'expiresAt';
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', cancelButton);
          break;
        default:
          ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4.');
          return;
      }
      
      return ctx.wizard.next();
    },
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    async (ctx) => {
      if (ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
        ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
      
      const { promoId, editField } = ctx.wizard.state;
      const newValue = ctx.message.text;
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥
        const promo = await Promo.findById(promoId);
        if (!promo) {
          ctx.reply('–û—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.', promoManagementKeyboard);
          return ctx.scene.leave();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        switch (editField) {
          case 'name':
            promo.name = newValue;
            break;
          case 'description':
            promo.description = newValue;
            break;
          case 'totalLimit':
            const limit = parseInt(newValue);
            if (isNaN(limit) || limit <= 0) {
              ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –±—ã–ª –Ω–µ –º–µ–Ω—å—à–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            if (limit < promo.usedCount) {
              ctx.reply(`–û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (${promo.usedCount}).`);
              return;
            }
            
            promo.totalLimit = limit;
            break;
          case 'expiresAt':
            if (!isValidDateFormat(newValue)) {
              ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.');
              return;
            }
            
            promo.expiresAt = parseDateString(newValue);
            break;
        }
        
        await promo.save();
        
        ctx.reply(
          `–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n` +
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${promo.name}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
          `–õ–∏–º–∏—Ç: ${promo.usedCount}/${promo.totalLimit}\n` +
          `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promo.expiresAt)}`
        );
        
        setTimeout(() => {
          const scene = bot.scenes.get('promo-list-admin');
          if (scene) {
            scene.enter(ctx);
          } else {
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', promoManagementKeyboard);
          }
        }, 1000);
        
        return ctx.scene.leave();
      } catch (error) {
        console.error('Error updating promo:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', promoManagementKeyboard);
        return ctx.scene.leave();
      }
    }
  );
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã
  const stage = new Scenes.Stage([
    adminAuthScene,
    addPromoScene,
    addAdminScene,
    promoListAdminScene,
    adminListScene,
    editPromoScene,
    activatePromoScene,      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    activatedPromosScene     // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
  ]);
  
  bot.use(stage.middleware());
  
  
  
  bot.action(/activate_promo:(.+):(.+)/, isAdmin, async (ctx) => {
    try {
      const promoId = ctx.match[1];
      const promoCode = ctx.match[2];
      
      console.log('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', { promoId, promoCode }); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–∫–∞ –≤—ã–±–∏—Ä–∞–ª–∏ –æ–ø—Ü–∏—é
      const existingActivation = await ActivatedPromo.findOne({ code: promoCode });
      if (existingActivation) {
        return ctx.answerCbQuery('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!').then(() => {
          ctx.editMessageText('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º!', adminKeyboard);
        });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const promo = await Promo.findById(promoId);
      if (!promo) {
        return ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.').then(() => {
          ctx.editMessageText('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', adminKeyboard);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
      if (!promo.isActive) {
        return ctx.answerCbQuery('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.').then(() => {
          ctx.editMessageText('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.', adminKeyboard);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      if (promo.expiresAt < new Date()) {
        return ctx.answerCbQuery('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.').then(() => {
          ctx.editMessageText('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.', adminKeyboard);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      if (promo.usedCount >= promo.totalLimit) {
        return ctx.answerCbQuery('–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.').then(() => {
          ctx.editMessageText('–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.', adminKeyboard);
        });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
      await Promo.findByIdAndUpdate(promoId, { $inc: { usedCount: 1 } });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
      const newActivation = new ActivatedPromo({
        promoId: promoId,
        code: promoCode,
        activatedBy: ctx.from.id
      });
      await newActivation.save();
      
      // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
      await ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
      
      ctx.editMessageText(
        `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${promo.name}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
        `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promo.expiresAt)}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.usedCount + 1}/${promo.totalLimit}`,
        adminKeyboard
      );
    } catch (error) {
      console.error('Error activating promo:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
      ctx.editMessageText(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${error.message}`, adminKeyboard);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  bot.action('cancel_activation', isAdmin, (ctx) => {
    ctx.answerCbQuery('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    ctx.editMessageText('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', adminKeyboard);
  });
  
  bot.action('back_to_promo_management', isAdmin, (ctx) => {
    ctx.answerCbQuery();
    ctx.deleteMessage();
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', promoManagementKeyboard);
  });
  
  bot.action(/promo_view:(.+)/, isAdmin, async (ctx) => {
    try {
      const promoId = ctx.match[1];
      
      const promo = await Promo.findById(promoId);
      if (!promo) {
        return ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      const status = promo.isActive ? 
        (promo.expiresAt < new Date() ? '‚è±Ô∏è –ò—Å—Ç–µ–∫' : 
          (promo.usedCount >= promo.totalLimit ? 'üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω')) 
        : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      
      await ctx.answerCbQuery();
      
      await ctx.editMessageText(
        `–ü—Ä–æ–º–æ–∫–æ–¥: ${promo.name}\n\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
        `–°—Ç–∞—Ç—É—Å: ${status}\n` +
        `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.usedCount}/${promo.totalLimit}\n` +
        `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promo.expiresAt)}\n` +
        `ID: ${promo._id}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              promo.isActive ? 'üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
              `promo_toggle:${promo._id}`
            )
          ],
          [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `promo_delete:${promo._id}`)],
          [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `promo_edit:${promo._id}`)],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'promo_back_to_list')]
        ])
      );
    } catch (error) {
      console.error('Error viewing promo:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  });
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
  bot.action(/promo_toggle:(.+)/, isAdmin, async (ctx) => {
    try {
      const promoId = ctx.match[1];
      
      const promo = await Promo.findById(promoId);
      if (!promo) {
        return ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      promo.isActive = !promo.isActive;
      await promo.save();
      
      await ctx.answerCbQuery(`–ü—Ä–æ–º–æ–∫–æ–¥ ${promo.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const status = promo.isActive ? 
        (promo.expiresAt < new Date() ? '‚è±Ô∏è –ò—Å—Ç–µ–∫' : 
          (promo.usedCount >= promo.totalLimit ? 'üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω')) 
        : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      
      await ctx.editMessageText(
        `–ü—Ä–æ–º–æ–∫–æ–¥: ${promo.name}\n\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` +
        `–°—Ç–∞—Ç—É—Å: ${status}\n` +
        `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${promo.usedCount}/${promo.totalLimit}\n` +
        `–ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDate(promo.expiresAt)}\n` +
        `ID: ${promo._id}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              promo.isActive ? 'üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
              `promo_toggle:${promo._id}`
            )
          ],
          [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `promo_delete:${promo._id}`)],
          [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `promo_edit:${promo._id}`)],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'promo_back_to_list')]
        ])
      );
    } catch (error) {
      console.error('Error toggling promo:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  });
  
  bot.action(/promo_delete:(.+)/, isAdmin, async (ctx) => {
    try {
      const promoId = ctx.match[1];
      
      await Promo.findByIdAndDelete(promoId);
      
      await ctx.answerCbQuery('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
      await ctx.deleteMessage();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
      ctx.scene.enter('promo-list-admin');
    } catch (error) {
      console.error('Error deleting promo:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
  });
  
  bot.action(/promo_edit:(.+)/, isAdmin, async (ctx) => {
    try {
      const promoId = ctx.match[1];
      
      ctx.scene.state.promoId = promoId;
      await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
      await ctx.deleteMessage();
      
      ctx.scene.enter('edit-promo');
    } catch (error) {
      console.error('Error initiating promo edit:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  });
  
  bot.action('promo_back_to_list', isAdmin, (ctx) => {
    ctx.answerCbQuery('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.');
    ctx.deleteMessage();
    ctx.scene.enter('promo-list-admin');
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
  bot.action(/admin_toggle:(.+)/, isAdmin, async (ctx) => {
    try {
      const adminId = parseInt(ctx.match[1]);
      
      // –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (adminId === ctx.from.id) {
        return ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.');
      }
      
      const admin = await Admin.findOne({ telegramId: adminId });
      if (!admin) {
        return ctx.answerCbQuery('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      admin.isActive = !admin.isActive;
      await admin.save();
      
      await ctx.answerCbQuery(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText(
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.firstName} ${admin.lastName} ${admin.username ? '@' + admin.username : ''}\n\n` +
        `ID: ${admin.telegramId}\n` +
        `–°—Ç–∞—Ç—É—Å: ${admin.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(admin.addedAt)}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              admin.isActive ? 'üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
              `admin_toggle:${admin.telegramId}`
            )
          ],
          [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `admin_delete:${admin.telegramId}`)],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'admin_back_to_list')]
        ])
      );
    } catch (error) {
      console.error('Error toggling admin:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });
  
  bot.action(/admin_delete:(.+)/, isAdmin, async (ctx) => {
    try {
      const adminId = parseInt(ctx.match[1]);
      
      // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (adminId === ctx.from.id) {
        return ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.');
      }
      
      await Admin.findOneAndDelete({ telegramId: adminId });
      
      await ctx.answerCbQuery('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
      await ctx.deleteMessage();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      ctx.scene.enter('admin-list');
    } catch (error) {
      console.error('Error deleting admin:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });
  
  bot.action('admin_back_to_list', isAdmin, (ctx) => {
    ctx.answerCbQuery('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    ctx.deleteMessage();
    ctx.scene.enter('admin-list');
  });
  
  bot.action('back_to_admin_management', isAdmin, (ctx) => {
    ctx.answerCbQuery();
    ctx.deleteMessage();
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', adminManagementKeyboard);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.action(/admin_view:(.+)/, isAdmin, async (ctx) => {
    try {
      const adminId = parseInt(ctx.match[1]);
      
      const admin = await Admin.findOne({ telegramId: adminId });
      if (!admin) {
        return ctx.answerCbQuery('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      
      // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª—è—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      const isSelf = admin.telegramId === ctx.from.id;
      
      await ctx.answerCbQuery();
      
      await ctx.editMessageText(
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.firstName} ${admin.lastName} ${admin.username ? '@' + admin.username : ''}\n\n` +
        `ID: ${admin.telegramId}\n` +
        `–°—Ç–∞—Ç—É—Å: ${admin.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(admin.addedAt)}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              admin.isActive ? 'üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : 'üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
              `admin_toggle:${admin.telegramId}`,
              isSelf // Disable button if it's the current admin
            )
          ],
          [
            Markup.button.callback(
              'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
              `admin_delete:${admin.telegramId}`,
              isSelf // Disable button if it's the current admin
            )
          ],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'admin_back_to_list')]
        ])
      );
    } catch (error) {
      console.error('Error viewing admin:', error);
      ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  });

  
  bot.hears('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤—Ä—É—á–Ω—É—é', isAdmin, (ctx) => {
    ctx.scene.enter('activate-promo');
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π"
  bot.hears('–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π', isAdmin, (ctx) => {
    ctx.scene.enter('activated-promos');
  });
  
  bot.hears('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', isAdmin, (ctx) => {
    ctx.scene.enter('activate-user-promo');
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  bot.hears('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', isAdmin, (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', promoManagementKeyboard);
  });
  
  bot.hears('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', isAdmin, (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', adminManagementKeyboard);
  });
  
  bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É', isAdmin, (ctx) => {
    ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', mainKeyboard);
  });
  
  bot.hears('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', isAdmin, (ctx) => {
    ctx.scene.enter('add-promo');
  });
  
  bot.hears('–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', isAdmin, (ctx) => {
    ctx.scene.enter('promo-list-admin');
  });
  
  bot.hears('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', isAdmin, (ctx) => {
    ctx.scene.enter('add-admin');
  });
  
  bot.hears('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', isAdmin, (ctx) => {
    ctx.scene.enter('admin-list');
  });
  
  bot.hears('–ù–∞–∑–∞–¥', isAdmin, (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', adminKeyboard);
  });

  return {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ index.js
    scenes: [
      adminAuthScene,
      addPromoScene,
      addAdminScene,
      promoListAdminScene,
      adminListScene,
      editPromoScene,
      activatePromoScene,      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      activatedPromosScene     // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    ]
  };
};