require('dotenv').config();
const { Telegraf, session, Scenes } = require('telegraf');
const mongoose = require('mongoose');
const connectDB = require('./database/connect');
const User = require('./database/models/user');
const { mainKeyboard } = require('./utils/keyboard');
const { formatDate } = require('./utils/helpers');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
bot.use(session());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mypromos
bot.command('mypromos', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ telegramId: userId })
      .populate('claimedPromos.promoId');
    
    if (!user || !user.claimedPromos || user.claimedPromos.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedPromos = [...user.claimedPromos].sort((a, b) => 
      new Date(b.claimedAt) - new Date(a.claimedAt)
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    let message = '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n';
    
    for (const promoItem of sortedPromos) {
      const { promoId, code, claimedAt } = promoItem;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
      if (!promoId) {
        message += `üîÑ –ö–æ–¥: ${code}\n`;
        message += `–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n`;
        message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n\n`;
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let status = '';
      const isExpired = promoId.expiresAt < new Date();
      
      if (!promoId.isActive) {
        status = '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      } else if (isExpired) {
        status = '‚è±Ô∏è –ò—Å—Ç–µ–∫';
      } else {
        status = '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';
      }
      
      message += `${status} ${promoId.name}\n`;
      message += `–ö–æ–¥: ${code}\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${promoId.description}\n`;
      message += `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promoId.expiresAt)}\n`;
      message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n\n`;
    }
    
    return ctx.reply(message, mainKeyboard);
  } catch (error) {
    console.error('Error in mypromos command:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã"
bot.hears('–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ telegramId: userId })
      .populate('claimedPromos.promoId');
    
    if (!user || !user.claimedPromos || user.claimedPromos.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedPromos = [...user.claimedPromos].sort((a, b) => 
      new Date(b.claimedAt) - new Date(a.claimedAt)
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    let message = '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n';
    
    for (const promoItem of sortedPromos) {
      const { promoId, code, claimedAt } = promoItem;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
      if (!promoId) {
        message += `üîÑ –ö–æ–¥: ${code}\n`;
        message += `–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n`;
        message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n\n`;
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let status = '';
      const isExpired = promoId.expiresAt < new Date();
      
      if (!promoId.isActive) {
        status = '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      } else if (isExpired) {
        status = '‚è±Ô∏è –ò—Å—Ç–µ–∫';
      } else {
        status = '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';
      }
      
      message += `${status} ${promoId.name}\n`;
      message += `–ö–æ–¥: ${code}\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${promoId.description}\n`;
      message += `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promoId.expiresAt)}\n`;
      message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n\n`;
    }
    
    return ctx.reply(message, mainKeyboard);
  } catch (error) {
    console.error('Error in mypromos button handler:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('User promos bot started'))
  .catch((err) => console.error('Error starting user promos bot:', err));

// –í–∫–ª—é—á–µ–Ω–∏–µ graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));