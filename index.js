require('dotenv').config();
const { Telegraf, session, Scenes } = require('telegraf');
const mongoose = require('mongoose');
const connectDB = require('./database/connect');
const User = require('./database/models/user');
const Promo = require('./database/models/promo');
const { mainKeyboard } = require('./utils/keyboard');
const { formatDate } = require('./utils/helpers');
const { checkGroupMembership } = require('./middlewares/membership');
const { generatePromoCode } = require('./utils/promo-generator');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Mongoose
mongoose.set('strictQuery', false);

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
bot.use(session());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
bot.start(async (ctx) => {
  try {
    const { id, first_name, last_name, username } = ctx.from;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await User.findOneAndUpdate(
      { telegramId: id },
      {
        firstName: first_name,
        lastName: last_name,
        username,
      },
      { upsert: true, new: true }
    );
    
    return ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.`, mainKeyboard);
  } catch (error) {
    console.error('Error in start command:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.hears('–ü—Ä–æ–º–æ–∫–æ–¥—ã', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const currentDate = new Date();
    const promos = await Promo.find({
      isActive: true,
      expiresAt: { $gt: currentDate },
      $expr: { $lt: ["$usedCount", "$totalLimit"] }
    });
    
    if (promos.length === 0) {
      return ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.', mainKeyboard);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    const { Markup } = require('telegraf');
    const keyboard = Markup.inlineKeyboard(
      promos.map(promo => [Markup.button.callback(promo.name, `promo:${promo._id}`)])
    );
    
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:', keyboard);
  } catch (error) {
    console.error('Error in promos list:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
bot.hears('–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ telegramId: userId })
      .populate('claimedPromos.promoId');
    
    if (!user || !user.claimedPromos || user.claimedPromos.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const sortedPromos = [...user.claimedPromos].sort((a, b) => 
      new Date(b.claimedAt) - new Date(a.claimedAt)
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    let message = '–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n';
    
    for (const promoItem of sortedPromos) {
      const { promoId, code, claimedAt, activated, activatedAt } = promoItem;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
      if (!promoId) {
        message += `üîÑ –ö–æ–¥: ${code}\n`;
        message += `–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n`;
        message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if (activated) {
          message += `–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ${formatDate(activatedAt)}\n`;
        } else {
          message += `–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n`;
        }
        
        message += `\n`;
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let statusIcon = '';
      const isExpired = promoId.expiresAt < new Date();
      
      if (!promoId.isActive) {
        statusIcon = '‚ùå'; // –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
      } else if (isExpired) {
        statusIcon = '‚è±Ô∏è'; // –ò—Å—Ç–µ–∫
      } else {
        statusIcon = '‚úÖ'; // –ê–∫—Ç–∏–≤–µ–Ω
      }
      
      message += `${statusIcon} ${promoId.name}\n`;
      message += `–ö–æ–¥: ${code}\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${promoId.description}\n`;
      message += `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promoId.expiresAt)}\n`;
      message += `–ü–æ–ª—É—á–µ–Ω: ${formatDate(claimedAt)}\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      if (activated) {
        message += `–°—Ç–∞—Ç—É—Å: üîê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${formatDate(activatedAt)}\n`;
      } else {
        message += `–°—Ç–∞—Ç—É—Å: üîì –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n`;
      }
      
      message += `\n`;
    }
    
    return ctx.reply(message, mainKeyboard);
  } catch (error) {
    console.error('Error in my promos handler:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', mainKeyboard);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.action(/promo:(.+)/, async (ctx) => {
  try {
    const promoId = ctx.match[1];
    const userId = ctx.from.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await User.findOne({ telegramId: userId });
    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    const hasClaimedPromo = user.claimedPromos.some(
      promo => promo.promoId && promo.promoId.toString() === promoId
    );
    
    if (hasClaimedPromo) {
      return ctx.reply('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.', mainKeyboard);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –≥—Ä—É–ø–ø–µ
    const isMember = await checkGroupMembership(ctx);
    if (!isMember) {
      return ctx.reply(
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã.',
        mainKeyboard
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const promo = await Promo.findById(promoId);
    if (!promo) {
      return ctx.reply('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.', mainKeyboard);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
    if (!promo.isActive) {
      return ctx.reply('–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.', mainKeyboard);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (promo.expiresAt < new Date()) {
      return ctx.reply('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.', mainKeyboard);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (promo.usedCount >= promo.totalLimit) {
      return ctx.reply('–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.', mainKeyboard);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const generatedCode = generatePromoCode();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await Promo.findByIdAndUpdate(promoId, { $inc: { usedCount: 1 } });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user.claimedPromos.push({
      promoId,
      code: generatedCode,
    });
    
    await user.save();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–º–æ–∫–æ–¥
    return ctx.reply(
      `–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: ${generatedCode}\n\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ: ${promo.description}\n` + 
      `–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(promo.expiresAt)}`,
      mainKeyboard
    );
  } catch (error) {
    console.error('Error handling promo action:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.', mainKeyboard);
  }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const adminHandler = require('./handlers/admin');
adminHandler(bot);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('Bot started'))
  .catch((err) => console.error('Error starting bot:', err));

// –í–∫–ª—é—á–µ–Ω–∏–µ graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));